import  rggen_rtl_pkg::*;

pub module rggen_wishbone_adapter #(
  param ADDRESS_WIDTH:        u32                 = 8,
  param LOCAL_ADDRESS_WIDTH:  u32                 = ADDRESS_WIDTH,
  param BUS_WIDTH:            u32                 = 32,
  param REGISTERS:            u32                 = 1,
  param PRE_DECODE:           bit                 = 0,
  param BASE_ADDRESS:         bit<ADDRESS_WIDTH>  = '0,
  param BYTE_SIZE:            u32                 = 256,
  param ERROR_STATUS:         bit                 = 0,
  param DEFAULT_READ_DATA:    bit<BUS_WIDTH>      = '0,
  param INSERT_SLICER:        bit                 = 0,
  param USE_STALL:            bit                 = 1
)(
  i_clk:        input   clock,
  i_rst:        input   reset,
  wishbone_if:  modport rggen_wishbone_if::slave,
  register_if:  modport rggen_register_if::host[REGISTERS]
) {
  inst  bus_if:         rggen_bus_if #(ADDRESS_WIDTH, BUS_WIDTH);
  var   request_valid:  logic<2>;
  var   wb_adr:         logic<ADDRESS_WIDTH>;
  var   wb_we:          logic;
  var   wb_dat:         logic<BUS_WIDTH>;
  var   wb_sel:         logic<BUS_WIDTH/8>;
  var   response_valid: logic<2>;
  var   response_data:  logic<BUS_WIDTH>;

  //  Request
  always_comb {
    wishbone_if.stall = request_valid[1];
  }

  always_comb {
    bus_if.valid  = (request_valid != '0) && (response_valid == '0);
    if request_valid[1] {
      bus_if.access     = if wb_we { rggen_access::WRITE } else { rggen_access::READ };
      bus_if.address    = wb_adr;
      bus_if.write_data = wb_dat;
      bus_if.strobe     = wb_sel;
    } else {
      bus_if.access     = if wishbone_if.we { rggen_access::WRITE } else { rggen_access::READ };
      bus_if.address    = wishbone_if.adr;
      bus_if.write_data = wishbone_if.dat_w;
      bus_if.strobe     = wishbone_if.sel;
    }
  }

  always_comb {
    request_valid[0]  = wishbone_if.cyc && wishbone_if.stb;
  }

  if USE_STALL: g_stall {
    always_ff {
      if_reset {
        request_valid[1]  = '0;
      } else if response_valid != '0 {
        request_valid[1]  = '0;
      } else if request_valid == 2'b01 {
        request_valid[1]  = '1;
      }
    }

    always_ff {
      if_reset {
        wb_adr  = '0;
        wb_we   = '0;
        wb_dat  = '0;
        wb_sel  = '0;
      } else if request_valid == 2'b01 {
        wb_adr  = wishbone_if.adr as ADDRESS_WIDTH;
        wb_we   = wishbone_if.we;
        wb_dat  = wishbone_if.dat_w;
        wb_sel  = wishbone_if.sel;
      }
    }
  } else {
    always_comb {
      request_valid[1]  = '0;
      wb_adr            = '0;
      wb_we             = '0;
      wb_dat            = '0;
      wb_sel            = '0;
    }
  }

  //  Response
  always_comb {
    wishbone_if.ack   = response_valid[0];
    wishbone_if.err   = response_valid[1];
    wishbone_if.rty   = '0;
    wishbone_if.dat_r = response_data;
  }

  always_ff {
    if_reset {
      response_valid  = '0;
    } else if response_valid != '0 {
      response_valid  = '0;
    } else if bus_if.ack() {
      case bus_if.status {
        rggen_status::OKAY,
        rggen_status::EXOKAY: response_valid  = 2'b01;
        default:              response_valid  = 2'b10;
      }
    }
  }

  always_ff {
    if bus_if.ack() {
      response_data = bus_if.read_data;
    }
  }

  //  Adapter common
  inst  u_adapter_common: rggen_adapter_common #(
    ADDRESS_WIDTH:        ADDRESS_WIDTH,
    LOCAL_ADDRESS_WIDTH:  LOCAL_ADDRESS_WIDTH,
    BUS_WIDTH:            BUS_WIDTH,
    STROBE_WIDTH:         BUS_WIDTH / 8,
    REGISTERS:            REGISTERS,
    PRE_DECODE:           PRE_DECODE,
    BASE_ADDRESS:         BASE_ADDRESS,
    BYTE_SIZE:            BYTE_SIZE,
    ERROR_STATUS:         ERROR_STATUS,
    DEFAULT_READ_DATA:    DEFAULT_READ_DATA,
    INSERT_SLICER:        INSERT_SLICER
  )(
    i_clk:        i_clk,
    i_rst:        i_rst,
    bus_if:       bus_if,
    register_if:  register_if
  );
}
