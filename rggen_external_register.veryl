import  rggen_rtl_pkg::*;

pub module rggen_external_register #(
  param ADDRESS_WIDTH:  u32                 = 8,
  param BUS_WIDTH:      u32                 = 32,
  param VALUE_WIDTH:    u32                 = BUS_WIDTH,
  param STROBE_WIDTH:   u32                 = BUS_WIDTH / 8,
  param START_ADDRESS:  bit<ADDRESS_WIDTH>  = '0,
  param BYTE_SIZE:      u32                 = 0
)(
  i_clk:        input   clock,
  i_rst:        input   reset,
  register_if:  modport rggen_register_if::register,
  bus_if:       modport rggen_bus_if::master
) {
  //  Address decoder
  var address_match:  logic;

  inst u_address_decoder: rggen_address_decoder #(
    READABLE:       true,
    WRITABLE:       true,
    ADDRESS_WIDTH:  ADDRESS_WIDTH,
    BUS_WIDTH:      BUS_WIDTH,
    START_ADDRESS:  START_ADDRESS,
    BYTE_SIZE:      BYTE_SIZE
  )(
    i_address:          register_if.address,
    i_access:           register_if.access,
    i_additional_match: 1'b1,
    o_match:            address_match
  );

  //  Request
  always_ff {
    if_reset {
      bus_if.valid  = '0;
    } else if bus_if.ack() {
      bus_if.valid  = '0;
    } else if register_if.valid && address_match {
      bus_if.valid  = '1;
    }
  }

  always_ff {
    if_reset {
      bus_if.address  = '0;
      bus_if.access   = rggen_access::READ;
    } else if register_if.valid && address_match {
      bus_if.address  = register_if.address - START_ADDRESS;
      bus_if.access   = register_if.access;
    }
  }

  always_ff {
    if register_if.valid && address_match {
      bus_if.write_data = register_if.write_data;
      if STROBE_WIDTH == BUS_WIDTH {
        bus_if.strobe = register_if.strobe as STROBE_WIDTH;
      } else {
        for i: u32 in 0..STROBE_WIDTH {
          bus_if.strobe[i]  = register_if.strobe[i step 8] != '0;
        }
      }
    }
  }

  //  Response
  always_comb {
    register_if.active    = address_match;
    register_if.ready     = bus_if.ack();
    register_if.status    = bus_if.status;
    register_if.read_data = bus_if.read_data;
    register_if.value     = bus_if.read_data as VALUE_WIDTH;
  }
}
