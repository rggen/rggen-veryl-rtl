import  rggen_rtl_pkg::*;

pub module rggen_native_adapter #(
  param ADDRESS_WIDTH:        u32                 = 8,
  param LOCAL_ADDRESS_WIDTH:  u32                 = 8,
  param BUS_WIDTH:            u32                 = 32,
  param STROBE_WIDTH:         u32                 = BUS_WIDTH / 8,
  param REGISTERS:            u32                 = 1,
  param PRE_DECODE:           bit                 = 0,
  param BASE_ADDRESS:         bit<ADDRESS_WIDTH>  = '0,
  param BYTE_SIZE:            u32                 = 256,
  param ERROR_STATUS:         bit                 = 0,
  param DEFAULT_READ_DATA:    bit<BUS_WIDTH>      = '0,
  param INSERT_SLICER:        bit                 = 0
)(
  i_clk:        input   clock,
  i_rst:        input   reset,
  csrbus_if:    modport rggen_bus_if::slave,
  register_if:  modport rggen_register_if::host[REGISTERS]
) {
  inst  bus_if:           rggen_bus_if #(ADDRESS_WIDTH, BUS_WIDTH, STROBE_WIDTH);
  var   csrbus_ready:     logic;
  var   csrbus_status:    rggen_status;
  var   csrbus_read_data: logic<BUS_WIDTH>;

  always_comb {
    bus_if.valid      = csrbus_if.valid && (!csrbus_ready);
    bus_if.access     = csrbus_if.access;
    bus_if.address    = csrbus_if.address;
    bus_if.write_data = csrbus_if.write_data;
    bus_if.strobe     = csrbus_if.strobe;
  }

  always_comb {
    csrbus_if.ready     = csrbus_ready;
    csrbus_if.status    = csrbus_status;
    csrbus_if.read_data = csrbus_read_data;
  }

  always_ff {
    if_reset {
      csrbus_ready  = '0;
    } else {
      csrbus_ready  = bus_if.ack();
    }
  }

  always_ff {
    if bus_if.ack() {
      csrbus_status     = bus_if.status;
      csrbus_read_data  = bus_if.read_data;
    }
  }

  inst  u_adapter_common: rggen_adapter_common #(
    ADDRESS_WIDTH:        ADDRESS_WIDTH,
    LOCAL_ADDRESS_WIDTH:  LOCAL_ADDRESS_WIDTH,
    BUS_WIDTH:            BUS_WIDTH,
    STROBE_WIDTH:         STROBE_WIDTH,
    REGISTERS:            REGISTERS,
    PRE_DECODE:           PRE_DECODE,
    BASE_ADDRESS:         BASE_ADDRESS,
    BYTE_SIZE:            BYTE_SIZE,
    ERROR_STATUS:         ERROR_STATUS,
    DEFAULT_READ_DATA:    DEFAULT_READ_DATA,
    INSERT_SLICER:        INSERT_SLICER
  )(
    i_clk:        i_clk,
    i_rst:        i_rst,
    bus_if:       bus_if,
    register_if:  register_if
  );
}
