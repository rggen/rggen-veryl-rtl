import rggen_rtl_pkg::*;

pub module rggen_bit_field #(
  param WIDTH:                    u32                 = 8,
  param INITIAL_VALUE:            bit<WIDTH>          = '0,
  param PRECEDENCE_ACCESS:        rggen_sw_hw_access  = rggen_sw_hw_access::HW_ACCESS,
  param SW_READ_ACTION:           rggen_sw_action     = rggen_sw_action::READ_DEFAULT,
  param SW_WRITE_ACTION:          rggen_sw_action     = rggen_sw_action::WRITE_DEFAULT,
  param SW_WRITE_ONCE:            bit                 = '0,
  param SW_WRITE_ENABLE_POLARITY: rggen_polarity      = rggen_polarity::ACTIVE_HIGH,
  param HW_WRITE_ENABLE_POLARITY: rggen_polarity      = rggen_polarity::ACTIVE_HIGH,
  param HW_SET_WIDTH:             u32                 = WIDTH,
  param HW_CLEAR_WIDTH:           u32                 = WIDTH,
  param STORAGE:                  bit                 = '1,
  param EXTERNAL_READ_DATA:       bit                 = '0,
  param TRIGGER:                  bit                 = '0
)(
  i_clk:              input   clock,
  i_rst:              input   reset,
  bit_field_if:       modport rggen_bit_field_if::bit_field,
  o_write_trigger:    output  logic,
  o_read_trigger:     output  logic,
  i_sw_write_enable:  input   logic,
  i_hw_write_enable:  input   logic,
  i_hw_write_data:    input   logic<WIDTH>,
  i_hw_set:           input   logic<HW_SET_WIDTH>,
  i_hw_clear:         input   logic<HW_CLEAR_WIDTH>,
  i_value:            input   logic<WIDTH>,
  i_mask:             input   logic<WIDTH>,
  o_value:            output  logic<WIDTH>,
  o_value_unmasked:   output  logic<WIDTH>
) {
  const SW_READ_ACTIVE:   bit = SW_READ_ACTION  != rggen_sw_action::READ_NONE;
  const SW_WRITE_ACTIVE:  bit = SW_WRITE_ACTION != rggen_sw_action::WRITE_NONE;

//--------------------------------------------------------------
//  Utility functions
//--------------------------------------------------------------
  function get_sw_update(
    read_access:  input logic,
    write_access: input logic,
    write_enable: input logic,
    write_done:   input logic
  ) -> logic<2> {
    var rd_update: logic;
    var wr_update: logic;

    rd_update =
      read_access &&
      (inside SW_READ_ACTION {rggen_sw_action::READ_CLEAR, rggen_sw_action::READ_SET});
    wr_update =
      write_access                               &&
      SW_WRITE_ACTIVE                            &&
      (write_enable == SW_WRITE_ENABLE_POLARITY) &&
      (write_done   == '0                      );
    return {wr_update, rd_update};
  }

  function get_hw_update(
    write_enable: input logic,
    set:          input logic<HW_SET_WIDTH>,
    clear:        input logic<HW_CLEAR_WIDTH>
  ) -> logic {
    return
      (write_enable == HW_WRITE_ENABLE_POLARITY) ||
      (set          != '0                      ) ||
      (clear        != '0                      );
  }

  function get_sw_next_value(
    current_value:  input logic<WIDTH>,
    update:         input logic<2>,
    write_mask:     input logic<WIDTH>,
    write_data:     input logic<WIDTH>
  ) -> logic<WIDTH> {
    var rd_value:     logic<WIDTH>;
    var wr_value:     logic<WIDTH>;
    var masked_data:  logic<2, WIDTH>;

    case SW_READ_ACTION {
      rggen_sw_action::READ_CLEAR:  rd_value  = '0;
      rggen_sw_action::READ_SET:    rd_value  = '1;
      default:                      rd_value  = current_value;
    }

    masked_data[0]  = write_mask & (~write_data);
    masked_data[1]  = write_mask & ( write_data);
    case SW_WRITE_ACTION {
      rggen_sw_action::WRITE_DEFAULT:   wr_value  = (current_value & (~write_mask)) | masked_data[1];
      rggen_sw_action::WRITE_0_CLEAR:   wr_value  = current_value & (~masked_data[0]);
      rggen_sw_action::WRITE_1_CLEAR:   wr_value  = current_value & (~masked_data[1]);
      rggen_sw_action::WRITE_CLEAR:     wr_value  = '0;
      rggen_sw_action::WRITE_0_SET:     wr_value  = current_value | masked_data[0];
      rggen_sw_action::WRITE_1_SET:     wr_value  = current_value | masked_data[1];
      rggen_sw_action::WRITE_SET:       wr_value  = '1;
      rggen_sw_action::WRITE_0_TOGGLE:  wr_value  = current_value ^ masked_data[0];
      rggen_sw_action::WRITE_1_TOGGLE:  wr_value  = current_value ^ masked_data[1];
      default:                          wr_value  = current_value;
    }

    switch {
      update[0]:  return rd_value;
      update[1]:  return wr_value;
      default:    return current_value;
    }
  }

  function get_hw_next_value(
    current_value:  input logic<WIDTH>,
    write_enable:   input logic,
    write_data:     input logic<WIDTH>,
    set:            input logic<HW_SET_WIDTH>,
    clear:          input logic<HW_CLEAR_WIDTH>
  ) -> logic<WIDTH> {
    var set_clear:  logic<2, WIDTH>;
    var value:      logic<WIDTH>;

    set_clear[0]  =
      if HW_SET_WIDTH == WIDTH {
        set as WIDTH
      } else {
        {set[0] repeat WIDTH}
      };
    set_clear[1]  =
      if HW_CLEAR_WIDTH == WIDTH {
        clear as WIDTH
      } else {
        {clear[0] repeat WIDTH}
      };
    value =
      if write_enable == HW_WRITE_ENABLE_POLARITY {
        write_data
      } else {
        current_value
      };

    return (value & (~set_clear[1])) | set_clear[0];
  }

  function get_next_value(
    current_value:    input logic<WIDTH>,
    sw_update:        input logic<2>,
    sw_write_mask:    input logic<WIDTH>,
    sw_write_data:    input logic<WIDTH>,
    hw_write_enable:  input logic,
    hw_write_data:    input logic<WIDTH>,
    hw_set:           input logic<HW_SET_WIDTH>,
    hw_clear:         input logic<HW_CLEAR_WIDTH>
  ) -> logic<WIDTH> {
    if PRECEDENCE_ACCESS == rggen_sw_hw_access::HW_ACCESS {
      let sw_next_value:  logic<WIDTH>  =
        get_sw_next_value(
          current_value, sw_update, sw_write_mask, sw_write_data
        );
      return
        get_hw_next_value(
          sw_next_value, hw_write_enable, hw_write_data,
          hw_set, hw_clear
        );
    } else {
      let hw_next_value:  logic<WIDTH>  =
        get_hw_next_value(
          current_value, hw_write_enable, hw_write_data,
          hw_set, hw_clear
        );
      return
        get_sw_next_value(
          hw_next_value, sw_update, sw_write_mask, sw_write_data
        );
    }
  }

//--------------------------------------------------------------
//  Body
//--------------------------------------------------------------
  var sw_update:      logic<2>;
  var sw_write_done:  logic;
  var hw_update:      logic;
  var wr_trigger:     logic;
  var rd_trigger:     logic;
  var value:          logic<WIDTH>;
  var read_data:      logic<WIDTH>;

  always_comb {
    bit_field_if.read_data  = read_data & i_mask;
    bit_field_if.value      = value;
  }

  always_comb {
    o_write_trigger   = wr_trigger;
    o_read_trigger    = rd_trigger;
    o_value           = value & i_mask;
    o_value_unmasked  = value;
  }

  always_comb {
    sw_update =
      get_sw_update(
        bit_field_if.is_read_access(),
        bit_field_if.is_write_access(), i_sw_write_enable, sw_write_done
      );
    hw_update =
      get_hw_update(
        i_hw_write_enable, i_hw_set, i_hw_clear
      );
  }

  if STORAGE && SW_WRITE_ONCE : g_sw_write_onece {
    always_ff {
      if_reset {
        sw_write_done  = '0;
      } else if sw_update[1] {
        sw_write_done  = '1;
      }
    }
  } else {
    assign  sw_write_done  = '0;
  }

  if TRIGGER && SW_WRITE_ACTIVE : g_wr_trigger {
    always_ff {
      if_reset {
        wr_trigger  = '0;
      } else {
        wr_trigger  = sw_update[1];
      }
    }
  } else {
    assign  wr_trigger  = '0;
  }

  if TRIGGER && SW_READ_ACTIVE : g_rd_trigger {
    always_ff {
      if_reset {
        rd_trigger  = '0;
      } else {
        rd_trigger  = bit_field_if.is_read_access();
      }
    }
  } else {
    assign  rd_trigger  = '0;
  }

  if STORAGE : g_value {
    always_ff {
      if_reset {
        value = INITIAL_VALUE;
      } else if sw_update[0] || sw_update[1] || hw_update {
        value =
          get_next_value(
            value, sw_update, bit_field_if.write_mask, bit_field_if.write_data,
            i_hw_write_enable, i_hw_write_data, i_hw_set, i_hw_clear
          );
      }
    }
  } else {
    assign  value = i_value;
  }

  always_comb {
    read_data =
      if !SW_READ_ACTIVE {
        '0
      } else if EXTERNAL_READ_DATA {
        i_value
      } else {
        value
      };
  }
}
